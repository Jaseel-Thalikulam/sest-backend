/// <reference types="node" />
/** Input type to getSignedUrl and getSignedCookies. */
export type CloudfrontSignInput = CloudfrontSignInputWithParameters | CloudfrontSignInputWithPolicy;
export interface CloudfrontSignInputBase {
    /** The URL string to sign. */
    url: string;
    /** The ID of the Cloudfront key pair. */
    keyPairId: string;
    /** The content of the Cloudfront private key. */
    privateKey: string | Buffer;
    /** The passphrase of RSA-SHA1 key*/
    passphrase?: string;
    /** The date string for when the signed URL or cookie can no longer be accessed. */
    dateLessThan?: string;
    /** The IP address string to restrict signed URL access to. */
    ipAddress?: string;
    /** The date string for when the signed URL or cookie can start to be accessed. */
    dateGreaterThan?: string;
}
export type CloudfrontSignInputWithParameters = CloudfrontSignInputBase & {
    /** The date string for when the signed URL or cookie can no longer be accessed */
    dateLessThan: string;
    /** For this type policy should not be provided. */
    policy?: never;
};
export type CloudfrontSignInputWithPolicy = CloudfrontSignInputBase & {
    /** The JSON-encoded policy string */
    policy: string;
    /**
     * For this type dateLessThan should not be provided.
     */
    dateLessThan?: never;
    /**
     * For this type ipAddress should not be provided.
     */
    ipAddress?: string;
    /**
     * For this type dateGreaterThan should not be provided.
     */
    dateGreaterThan?: never;
};
export interface CloudfrontSignedCookiesOutput {
    /** ID of the Cloudfront key pair. */
    "CloudFront-Key-Pair-Id": string;
    /** Hashed, signed, and base64-encoded version of the JSON policy. */
    "CloudFront-Signature": string;
    /** The unix date time for when the signed URL or cookie can no longer be accessed. */
    "CloudFront-Expires"?: number;
    /** Base64-encoded version of the JSON policy. */
    "CloudFront-Policy"?: string;
}
/**
 * Creates a signed URL string using a canned or custom policy.
 * @returns the input URL with signature attached as query parameters.
 */
export declare function getSignedUrl({ dateLessThan, dateGreaterThan, url, keyPairId, privateKey, ipAddress, policy, passphrase, }: CloudfrontSignInput): string;
/**
 * Creates signed cookies using a canned or custom policy.
 * @returns an object with keys/values that can be added to cookies.
 */
export declare function getSignedCookies({ ipAddress, url, privateKey, keyPairId, dateLessThan, dateGreaterThan, policy, passphrase, }: CloudfrontSignInput): CloudfrontSignedCookiesOutput;
