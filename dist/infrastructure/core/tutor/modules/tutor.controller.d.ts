/// <reference types="multer" />
import { ProfileDto } from '../../common/DTO/tutorProfileDTO';
import { search_Service } from '../../common/services/search.service';
import { Edit_ProfileService } from '../../common/services/profile.service';
import { Request, Response } from 'express';
import { CategoryService } from 'src/infrastructure/core/common/services/category.service';
import { TutorCategoryDTO } from '../dto/insertCategoryDTO';
import { tutor_CategoryService } from './services/tutor_Category.service';
import { fetchChatsDto } from '../../common/DTO/chat/fetchChatsDto';
import { accessChatDto } from '../../common/DTO/chat/creatChatDTO';
import { ChatService } from '../../common/services/chat.service';
import { PaymentService } from '../../common/services/payment.service';
import { PostService } from '../../common/services/post.service';
import { relationship_Service } from '../../common/services/relationship.service';
import { StudentHomePageService } from '../../student/modules/services/homepage.service';
import { FollowDTO } from '../../student/DTO/UserIdDTO';
import { TutorIdDto } from '../../student/DTO/tutorIdDTO';
import { PollDataDto } from '../../common/DTO/post/pollDataDto';
import IDeletePostDto from '../../common/DTO/post/deletePostDto';
import { LikePostDTO } from '../../common/DTO/post/likePostDto';
import CommentDataDTO from '../../common/DTO/post/commentDataDto';
import CommentAPIDto from '../../common/DTO/post/CommentAPIDto';
import { JitsiMeetDataDTO } from '../../common/DTO/meet/JistimeetDTO';
import { MeetService } from '../../common/services/meet.service';
import { S3Service } from './services/S3.service';
import { CourseService } from '../../common/services/course.service';
import { upload_Service } from '../../upload/upload.service';
import { PaymentDTO } from '../../common/DTO/payment/paymentDTO';
import { SubscriptionDTO } from '../../common/DTO/subscription/subscriptionDto';
import { Subscription_service } from '../../common/services/subscription.service';
export declare class TutorController {
    private subscriptionService;
    private paymentService;
    private uploadService;
    private courseService;
    private s3Service;
    private meetService;
    private chatService;
    private relationShipService;
    private editTutorPriofileService;
    private tutorCategoryService;
    private categoryService;
    private postService;
    private studentHomePageService;
    private _Search_Services;
    private readonly s3;
    constructor(subscriptionService: Subscription_service, paymentService: PaymentService, uploadService: upload_Service, courseService: CourseService, s3Service: S3Service, meetService: MeetService, chatService: ChatService, relationShipService: relationship_Service, editTutorPriofileService: Edit_ProfileService, tutorCategoryService: tutor_CategoryService, categoryService: CategoryService, postService: PostService, studentHomePageService: StudentHomePageService, _Search_Services: search_Service);
    postUser(user: ProfileDto, res: Response): Promise<Response<any, Record<string, any>>>;
    getCategories(res: Response): Promise<Response<any, Record<string, any>>>;
    insertCategory(insertData: TutorCategoryDTO, res: Response): Promise<Response<any, Record<string, any>>>;
    removeCategory(removeData: TutorCategoryDTO, res: Response): Promise<Response<any, Record<string, any>>>;
    accessChat(data: accessChatDto, res: Response): Promise<void>;
    fetchChats(data: fetchChatsDto, res: Response): Promise<void>;
    fetchAllMessage(chatId: string, res: Response): Promise<void>;
    UploadArticle(articleThumbnail: Express.Multer.File, userId: string, timeStamp: string, type: string, articleTitle: string, articleContent: string, res: Response): Promise<void>;
    CreateCourse(coverImage: Express.Multer.File, tutorId: string, title: string, description: string, category: string, res: Response): Promise<void>;
    UploadVideo(files: {
        video?: Express.Multer.File[];
        thumbnail?: Express.Multer.File[];
    }, title: string, courseId: string, userId: string, req: Request, res: Response): Promise<void>;
    UploadPoll(pollData: PollDataDto, res: Response): Promise<void>;
    uploadMedia(mediaThumbnail: Express.Multer.File, userId: string, timeStamp: string, type: string, caption: string, res: Response): Promise<void>;
    fetchFeedPost(userId: string, res: Response): Promise<void>;
    getvideoData(videoId: string, res: Response): Promise<void>;
    fetchTutorCourses(tutorId: string, res: Response): Promise<void>;
    fetchUserPost(userId: string, res: Response): Promise<void>;
    getAllTutor(res: Response): Promise<void>;
    getUser(userId: TutorIdDto, res: Response): Promise<void>;
    SubscriptionPayment(PaymentDetails: PaymentDTO, res: Response): Promise<void>;
    AddSubscription(SubscriptionDetails: SubscriptionDTO, res: Response): Promise<void>;
    handleFollow(UsersId: FollowDTO, res: Response): Promise<void>;
    handleFollowIndicator(followedBy: string, following: string, res: Response): Promise<void>;
    getSubscriptionDetails(TutorId: string, StudentId: string, res: Response): Promise<void>;
    handleDeletePost(res: Response, data: IDeletePostDto): Promise<void>;
    handleDeleteComment(res: Response, data: CommentAPIDto): Promise<void>;
    likePost(Postlikedata: LikePostDTO, res: Response): Promise<void>;
    getfollowers(userId: string, res: Response): Promise<void>;
    likeComment(Commentlikedata: CommentAPIDto, res: Response): Promise<void>;
    addComment(commentData: CommentDataDTO, res: Response): Promise<void>;
    editMedia(mediaThumbnail: Express.Multer.File, userId: string, timeStamp: string, type: string, postId: string, caption: string, res: Response): Promise<void>;
    Search(searchInput: string, option: string, res: Response): Promise<void>;
    getcourseDetail(CourseId: string, res: Response): Promise<void>;
    getMeetToken(meetData: JitsiMeetDataDTO, res: Response): Promise<void>;
}
